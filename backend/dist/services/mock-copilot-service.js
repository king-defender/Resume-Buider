"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockCopilotService = void 0;
class MockCopilotService {
    constructor() {
        this.name = 'GitHub Copilot (Mock)';
    }
    isAvailable() {
        return true; // Always available for demo
    }
    async analyze(resumeContent, jobDescription) {
        // Simulate API delay
        await new Promise(resolve => setTimeout(resolve, 800 + Math.random() * 1500));
        // Focus on technical aspects (as Copilot would)
        const hasTechnicalTerms = /\b(python|javascript|react|node|docker|kubernetes|aws|azure|gcp|sql|nosql|api|microservices|git|ci\/cd)\b/i.test(resumeContent + jobDescription);
        return {
            summary: `GitHub Copilot analysis completed. ${hasTechnicalTerms ? 'Strong technical foundation detected' : 'Consider adding more technical details'}. The resume demonstrates ${this.getRandomTechLevel()} technical proficiency.`,
            strengths: [
                'Clean code development practices mentioned',
                'Version control experience evident',
                'API development and integration skills',
                'Modern development frameworks listed'
            ],
            improvements: [
                'Add more specific technology stack details',
                'Include GitHub/portfolio links',
                'Mention open source contributions',
                'Highlight code quality practices'
            ],
            keywordMatch: Math.floor(55 + Math.random() * 30), // 55-85%
            skillGaps: [
                'Advanced DevOps practices',
                'Container orchestration',
                'Test-driven development',
                'Performance optimization'
            ],
            recommendations: [
                'Link to GitHub profile with sample projects',
                'Quantify code impact (performance improvements, bug reductions)',
                'Mention agile/scrum methodologies',
                'Add technical certifications',
                'Include relevant programming languages and frameworks'
            ],
            optimizedContent: `MOCK TECHNICAL OPTIMIZATIONS:\n\n• Developed scalable microservices architecture using Node.js and Docker, supporting 10,000+ concurrent users\n• Implemented CI/CD pipeline with GitHub Actions, reducing deployment time from 2 hours to 15 minutes\n• Built responsive React applications with TypeScript, achieving 95% code coverage through Jest testing\n• Optimized database queries and API endpoints, improving application response time by 45%\n\n(This is mock content generated by GitHub Copilot simulation)`
        };
    }
    getRandomTechLevel() {
        const levels = ['solid', 'impressive', 'strong', 'notable', 'excellent'];
        return levels[Math.floor(Math.random() * levels.length)];
    }
}
exports.MockCopilotService = MockCopilotService;
//# sourceMappingURL=mock-copilot-service.js.map