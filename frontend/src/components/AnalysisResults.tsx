import React from 'react';
import {
  VStack,
  HStack,
  Box,
  Text,
  Heading,
  Badge,
  Progress,
  List,
  ListItem,
  ListIcon,
  Button,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  Textarea,
  useToast,
  Divider,
  Grid,
  GridItem,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
} from '@chakra-ui/react';
import { CheckCircleIcon, WarningIcon, InfoIcon, DownloadIcon } from '@chakra-ui/icons';
import { AnalysisResult } from '../types';

interface Props {
  result: AnalysisResult;
}

export const AnalysisResults: React.FC<Props> = ({ result }) => {
  const toast = useToast();

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'green';
    if (score >= 60) return 'yellow';
    return 'red';
  };

  const getScoreText = (score: number) => {
    if (score >= 80) return 'Excellent';
    if (score >= 60) return 'Good';
    if (score >= 40) return 'Fair';
    return 'Needs Improvement';
  };

  const handleDownload = (content: string, filename: string) => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: 'Download Complete',
      description: `${filename} has been downloaded`,
      status: 'success',
      duration: 3000,
      isClosable: true,
    });
  };

  const generateFullReport = () => {
    const report = `
RESUME ANALYSIS REPORT
======================

SUMMARY
-------
${result.summary}

KEYWORD MATCH SCORE: ${result.keywordMatch}%
Status: ${getScoreText(result.keywordMatch)}

STRENGTHS
---------
${result.strengths.map((item, index) => `${index + 1}. ${item}`).join('\n')}

AREAS FOR IMPROVEMENT
--------------------
${result.improvements.map((item, index) => `${index + 1}. ${item}`).join('\n')}

SKILL GAPS IDENTIFIED
--------------------
${result.skillGaps.map((item, index) => `${index + 1}. ${item}`).join('\n')}

RECOMMENDATIONS
---------------
${result.recommendations.map((item, index) => `${index + 1}. ${item}`).join('\n')}

${result.optimizedContent ? `
OPTIMIZED CONTENT SAMPLE
------------------------
${result.optimizedContent}
` : ''}

Generated by AI-Powered Resume Builder
Date: ${new Date().toLocaleDateString()}
    `.trim();

    return report;
  };

  return (
    <VStack spacing={6} align="stretch">
      {/* Summary Card */}
      <Box bg="white" p={6} borderRadius="lg" shadow="sm" border="1px solid" borderColor="gray.200">
        <Heading size="md" mb={4}>Analysis Summary</Heading>
        <Text color="gray.700">{result.summary}</Text>
      </Box>

      {/* Score Overview */}
      <Grid templateColumns="repeat(auto-fit, minmax(200px, 1fr))" gap={4}>
        <GridItem>
          <Box bg={`${getScoreColor(result.keywordMatch)}.50`} p={4} borderRadius="lg" border="1px solid" borderColor={`${getScoreColor(result.keywordMatch)}.200`}>
            <Stat>
              <StatLabel>Keyword Match Score</StatLabel>
              <StatNumber color={`${getScoreColor(result.keywordMatch)}.600`}>
                {result.keywordMatch}%
              </StatNumber>
              <StatHelpText>{getScoreText(result.keywordMatch)}</StatHelpText>
            </Stat>
            <Progress 
              value={result.keywordMatch} 
              colorScheme={getScoreColor(result.keywordMatch)}
              mt={2}
              borderRadius="full"
            />
          </Box>
        </GridItem>
        
        <GridItem>
          <Box bg="white" p={4} borderRadius="lg" shadow="sm" border="1px solid" borderColor="gray.200">
            <Stat>
              <StatLabel>Issues Found</StatLabel>
              <StatNumber color="orange.600">
                {result.improvements.length + result.skillGaps.length}
              </StatNumber>
              <StatHelpText>Areas for improvement</StatHelpText>
            </Stat>
          </Box>
        </GridItem>
      </Grid>

      {/* Detailed Analysis */}
      <Tabs colorScheme="blue">
        <TabList>
          <Tab>Strengths</Tab>
          <Tab>Improvements</Tab>
          <Tab>Skill Gaps</Tab>
          <Tab>Recommendations</Tab>
          {result.optimizedContent && <Tab>Optimized Content</Tab>}
        </TabList>

        <TabPanels>
          {/* Strengths */}
          <TabPanel>
            <VStack align="stretch" spacing={3}>
              <Text color="gray.600" mb={3}>
                These are the strong points in your resume that align well with the job requirements:
              </Text>
              <List spacing={3}>
                {result.strengths.map((strength, index) => (
                  <ListItem key={index}>
                    <HStack align="start" spacing={3}>
                      <ListIcon as={CheckCircleIcon} color="green.500" mt={1} />
                      <Text>{strength}</Text>
                    </HStack>
                  </ListItem>
                ))}
              </List>
              {result.strengths.length === 0 && (
                <Text color="gray.500" fontStyle="italic">
                  No specific strengths identified in this analysis.
                </Text>
              )}
            </VStack>
          </TabPanel>

          {/* Improvements */}
          <TabPanel>
            <VStack align="stretch" spacing={3}>
              <Text color="gray.600" mb={3}>
                Focus on these areas to make your resume more competitive:
              </Text>
              <List spacing={3}>
                {result.improvements.map((improvement, index) => (
                  <ListItem key={index}>
                    <HStack align="start" spacing={3}>
                      <ListIcon as={WarningIcon} color="orange.500" mt={1} />
                      <Text>{improvement}</Text>
                    </HStack>
                  </ListItem>
                ))}
              </List>
              {result.improvements.length === 0 && (
                <Text color="gray.500" fontStyle="italic">
                  No specific improvements suggested in this analysis.
                </Text>
              )}
            </VStack>
          </TabPanel>

          {/* Skill Gaps */}
          <TabPanel>
            <VStack align="stretch" spacing={3}>
              <Text color="gray.600" mb={3}>
                Skills mentioned in the job description but missing from your resume:
              </Text>
              <List spacing={3}>
                {result.skillGaps.map((gap, index) => (
                  <ListItem key={index}>
                    <HStack align="start" spacing={3}>
                      <ListIcon as={InfoIcon} color="blue.500" mt={1} />
                      <Text>{gap}</Text>
                    </HStack>
                  </ListItem>
                ))}
              </List>
              {result.skillGaps.length === 0 && (
                <Box p={4} bg="green.50" borderRadius="md" border="1px solid" borderColor="green.200">
                  <Text color="green.700" fontWeight="medium">
                    ðŸŽ‰ Great news! No significant skill gaps were identified. Your skills appear to align well with the job requirements.
                  </Text>
                </Box>
              )}
            </VStack>
          </TabPanel>

          {/* Recommendations */}
          <TabPanel>
            <VStack align="stretch" spacing={3}>
              <Text color="gray.600" mb={3}>
                Actionable steps to improve your resume for this role:
              </Text>
              <List spacing={3}>
                {result.recommendations.map((recommendation, index) => (
                  <ListItem key={index}>
                    <HStack align="start" spacing={3}>
                      <Badge colorScheme="blue" variant="solid" fontSize="xs" mt={1}>
                        {index + 1}
                      </Badge>
                      <Text>{recommendation}</Text>
                    </HStack>
                  </ListItem>
                ))}
              </List>
              {result.recommendations.length === 0 && (
                <Text color="gray.500" fontStyle="italic">
                  No specific recommendations provided in this analysis.
                </Text>
              )}
            </VStack>
          </TabPanel>

          {/* Optimized Content */}
          {result.optimizedContent && (
            <TabPanel>
              <VStack align="stretch" spacing={4}>
                <Text color="gray.600">
                  Here's an optimized version of some of your resume content:
                </Text>
                <Box bg="gray.50" p={4} borderRadius="md" border="1px solid" borderColor="gray.200">
                  <Textarea
                    value={result.optimizedContent}
                    isReadOnly
                    rows={12}
                    bg="white"
                    resize="vertical"
                  />
                </Box>
                <HStack>
                  <Button
                    size="sm"
                    variant="outline"
                    leftIcon={<DownloadIcon />}
                    onClick={() => handleDownload(result.optimizedContent!, 'optimized-content.txt')}
                  >
                    Download Optimized Content
                  </Button>
                </HStack>
              </VStack>
            </TabPanel>
          )}
        </TabPanels>
      </Tabs>

      {/* Download Actions */}
      <Divider />
      <HStack justify="center" spacing={4} pt={4}>
        <Button
          leftIcon={<DownloadIcon />}
          colorScheme="blue"
          onClick={() => handleDownload(generateFullReport(), 'resume-analysis-report.txt')}
        >
          Download Full Report
        </Button>
      </HStack>
    </VStack>
  );
};